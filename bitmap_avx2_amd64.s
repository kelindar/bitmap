//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_x64count_avx2(SB), $0-24

	MOVQ data+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ result+16(FP), DX

	LONG $0x0002c748; WORD $0x0000; BYTE $0x00 // mov    qword [rdx], 0
	WORD $0x8548; BYTE $0xf6                   // test    rsi, rsi
	JE   LBB0_6
	LONG $0xff468d48                           // lea    rax, [rsi - 1]
	WORD $0x8941; BYTE $0xf0                   // mov    r8d, esi
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB0_7
	WORD $0xc931                               // xor    ecx, ecx
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB0_3

LBB0_7:
	LONG $0xfce68348 // and    rsi, -4
	WORD $0xc931     // xor    ecx, ecx
	WORD $0xc031     // xor    eax, eax

LBB0_8:
	LONG $0xb80f4cf3; WORD $0xc70c             // popcnt    r9, qword [rdi + 8*rax]
	WORD $0x0149; BYTE $0xc9                   // add    r9, rcx
	WORD $0x894c; BYTE $0x0a                   // mov    qword [rdx], r9
	LONG $0xb80f48f3; WORD $0xc74c; BYTE $0x08 // popcnt    rcx, qword [rdi + 8*rax + 8]
	WORD $0x014c; BYTE $0xc9                   // add    rcx, r9
	WORD $0x8948; BYTE $0x0a                   // mov    qword [rdx], rcx
	LONG $0xb80f4cf3; WORD $0xc74c; BYTE $0x10 // popcnt    r9, qword [rdi + 8*rax + 16]
	WORD $0x0149; BYTE $0xc9                   // add    r9, rcx
	WORD $0x894c; BYTE $0x0a                   // mov    qword [rdx], r9
	LONG $0xb80f48f3; WORD $0xc74c; BYTE $0x18 // popcnt    rcx, qword [rdi + 8*rax + 24]
	WORD $0x014c; BYTE $0xc9                   // add    rcx, r9
	WORD $0x8948; BYTE $0x0a                   // mov    qword [rdx], rcx
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_8

LBB0_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB0_6
	LONG $0xc7048d48         // lea    rax, [rdi + 8*rax]
	WORD $0xf631             // xor    esi, esi

LBB0_5:
	LONG $0xb80f48f3; WORD $0xf03c // popcnt    rdi, qword [rax + 8*rsi]
	WORD $0x0148; BYTE $0xf9       // add    rcx, rdi
	WORD $0x8948; BYTE $0x0a       // mov    qword [rdx], rcx
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3949; BYTE $0xf0       // cmp    r8, rsi
	JNE  LBB0_5

LBB0_6:
	RET
