//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x008(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x010(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x018(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x020(SB)/8, $0x0302020102010100
DATA LCDATA1<>+0x028(SB)/8, $0x0403030203020201
DATA LCDATA1<>+0x030(SB)/8, $0x0302020102010100
DATA LCDATA1<>+0x038(SB)/8, $0x0403030203020201
GLOBL LCDATA1<>(SB), 8, $64

TEXT Â·_x64count_avx2(SB), $0-24

	MOVQ data+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ result+16(FP), DX
	LEAQ LCDATA1<>(SB), BP

	LONG $0x0002c748; WORD $0x0000; BYTE $0x00 // mov    qword [rdx], 0
	WORD $0x8949; BYTE $0xf0                   // mov    r8, rsi
	LONG $0x06e8c149                           // shr    r8, 6
	WORD $0x8545; BYTE $0xc0                   // test    r8d, r8d
	JE   LBB0_1
	LONG $0x04e0c149                           // shl    r8, 4
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0xc9eff1c5                           // vpxor    xmm1, xmm1, xmm1
	LONG $0xf6efc9c5                           // vpxor    xmm6, xmm6, xmm6
	LONG $0xef3941c4; BYTE $0xc0               // vpxor    xmm8, xmm8, xmm8
	LONG $0xffefc1c5                           // vpxor    xmm7, xmm7, xmm7
	LONG $0xd2efe9c5                           // vpxor    xmm2, xmm2, xmm2
	WORD $0x8545; BYTE $0xc0                   // test    r8d, r8d
	JE   LBB0_6
	LONG $0xf0e08341                           // and    r8d, -16
	LONG $0xe08f8d48; WORD $0x0001; BYTE $0x00 // lea    rcx, [rdi + 480]
	LONG $0xd2efe9c5                           // vpxor    xmm2, xmm2, xmm2
	WORD $0xc031                               // xor    eax, eax
	LONG $0x5d6ffdc5; BYTE $0x00               // vmovdqa    ymm3, yword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x656ffdc5; BYTE $0x20               // vmovdqa    ymm4, yword 32[rbp] /* [rip + .LCPI0_1] */
	LONG $0xedefd1c5                           // vpxor    xmm5, xmm5, xmm5
	LONG $0xffefc1c5                           // vpxor    xmm7, xmm7, xmm7
	LONG $0xef3941c4; BYTE $0xc0               // vpxor    xmm8, xmm8, xmm8
	LONG $0xf6efc9c5                           // vpxor    xmm6, xmm6, xmm6
	LONG $0xc9eff1c5                           // vpxor    xmm1, xmm1, xmm1

LBB0_4:
	QUAD $0xfffffe20896f7dc5                   // vmovdqa    ymm9, yword [rcx - 480]
	QUAD $0xfffffe40916f7dc5                   // vmovdqa    ymm10, yword [rcx - 448]
	QUAD $0xfffffe60996f7dc5                   // vmovdqa    ymm11, yword [rcx - 416]
	QUAD $0xfffffe80a16f7dc5                   // vmovdqa    ymm12, yword [rcx - 384]
	LONG $0xefef35c5                           // vpxor    ymm13, ymm9, ymm7
	LONG $0xffdbb5c5                           // vpand    ymm7, ymm9, ymm7
	LONG $0xdb1541c4; BYTE $0xca               // vpand    ymm9, ymm13, ymm10
	LONG $0xffebb5c5                           // vpor    ymm7, ymm9, ymm7
	LONG $0xef1541c4; BYTE $0xca               // vpxor    ymm9, ymm13, ymm10
	LONG $0xef2541c4; BYTE $0xd1               // vpxor    ymm10, ymm11, ymm9
	LONG $0xdb2541c4; BYTE $0xc9               // vpand    ymm9, ymm11, ymm9
	LONG $0xdb2d41c4; BYTE $0xdc               // vpand    ymm11, ymm10, ymm12
	LONG $0xef2d41c4; BYTE $0xd4               // vpxor    ymm10, ymm10, ymm12
	LONG $0xeb2541c4; BYTE $0xc9               // vpor    ymm9, ymm11, ymm9
	LONG $0xef4541c4; BYTE $0xd8               // vpxor    ymm11, ymm7, ymm8
	LONG $0xdb45c1c4; BYTE $0xf8               // vpand    ymm7, ymm7, ymm8
	LONG $0xdb3541c4; BYTE $0xc3               // vpand    ymm8, ymm9, ymm11
	LONG $0xef3541c4; BYTE $0xcb               // vpxor    ymm9, ymm9, ymm11
	QUAD $0xfffffea0996f7dc5                   // vmovdqa    ymm11, yword [rcx - 352]
	QUAD $0xfffffec0a16f7dc5                   // vmovdqa    ymm12, yword [rcx - 320]
	LONG $0xef2541c4; BYTE $0xea               // vpxor    ymm13, ymm11, ymm10
	LONG $0xffebbdc5                           // vpor    ymm7, ymm8, ymm7
	LONG $0xdb2541c4; BYTE $0xc2               // vpand    ymm8, ymm11, ymm10
	LONG $0xdb1541c4; BYTE $0xd4               // vpand    ymm10, ymm13, ymm12
	LONG $0xef1541c4; BYTE $0xdc               // vpxor    ymm11, ymm13, ymm12
	LONG $0xeb2d41c4; BYTE $0xc0               // vpor    ymm8, ymm10, ymm8
	QUAD $0xfffffee0916f7dc5                   // vmovdqa    ymm10, yword [rcx - 288]
	QUAD $0xffffff00a16f7dc5                   // vmovdqa    ymm12, yword [rcx - 256]
	LONG $0xef2d41c4; BYTE $0xeb               // vpxor    ymm13, ymm10, ymm11
	LONG $0xdb2d41c4; BYTE $0xd3               // vpand    ymm10, ymm10, ymm11
	LONG $0xdb1541c4; BYTE $0xdc               // vpand    ymm11, ymm13, ymm12
	LONG $0xef1541c4; BYTE $0xe4               // vpxor    ymm12, ymm13, ymm12
	LONG $0xef3d41c4; BYTE $0xe9               // vpxor    ymm13, ymm8, ymm9
	LONG $0xeb2541c4; BYTE $0xd2               // vpor    ymm10, ymm11, ymm10
	LONG $0xdb3d41c4; BYTE $0xc1               // vpand    ymm8, ymm8, ymm9
	LONG $0xdb2d41c4; BYTE $0xcd               // vpand    ymm9, ymm10, ymm13
	LONG $0xdeef45c5                           // vpxor    ymm11, ymm7, ymm6
	LONG $0xef2d41c4; BYTE $0xd5               // vpxor    ymm10, ymm10, ymm13
	LONG $0xf6dbc5c5                           // vpand    ymm6, ymm7, ymm6
	QUAD $0xffffff20b96ffdc5                   // vmovdqa    ymm7, yword [rcx - 224]
	QUAD $0xffffff40a96f7dc5                   // vmovdqa    ymm13, yword [rcx - 192]
	LONG $0xeb3541c4; BYTE $0xc0               // vpor    ymm8, ymm9, ymm8
	LONG $0xef4541c4; BYTE $0xcc               // vpxor    ymm9, ymm7, ymm12
	LONG $0xdb45c1c4; BYTE $0xfc               // vpand    ymm7, ymm7, ymm12
	LONG $0xdb3541c4; BYTE $0xe5               // vpand    ymm12, ymm9, ymm13
	LONG $0xdb3d41c4; BYTE $0xf3               // vpand    ymm14, ymm8, ymm11
	LONG $0xffeb9dc5                           // vpor    ymm7, ymm12, ymm7
	LONG $0xef3541c4; BYTE $0xcd               // vpxor    ymm9, ymm9, ymm13
	QUAD $0xffffff60a16f7dc5                   // vmovdqa    ymm12, yword [rcx - 160]
	LONG $0xef3d41c4; BYTE $0xdb               // vpxor    ymm11, ymm8, ymm11
	LONG $0x416f7dc5; BYTE $0x80               // vmovdqa    ymm8, yword [rcx - 128]
	LONG $0xef1d41c4; BYTE $0xe9               // vpxor    ymm13, ymm12, ymm9
	LONG $0xdb1d41c4; BYTE $0xc9               // vpand    ymm9, ymm12, ymm9
	LONG $0xf6eb8dc5                           // vpor    ymm6, ymm14, ymm6
	LONG $0xdb1541c4; BYTE $0xe0               // vpand    ymm12, ymm13, ymm8
	LONG $0xef1541c4; BYTE $0xc0               // vpxor    ymm8, ymm13, ymm8
	LONG $0xef4541c4; BYTE $0xea               // vpxor    ymm13, ymm7, ymm10
	LONG $0xeb1d41c4; BYTE $0xc9               // vpor    ymm9, ymm12, ymm9
	LONG $0xdb45c1c4; BYTE $0xfa               // vpand    ymm7, ymm7, ymm10
	LONG $0xdb3541c4; BYTE $0xd5               // vpand    ymm10, ymm9, ymm13
	LONG $0x616f7dc5; BYTE $0xa0               // vmovdqa    ymm12, yword [rcx - 96]
	LONG $0xef3541c4; BYTE $0xcd               // vpxor    ymm9, ymm9, ymm13
	LONG $0x696f7dc5; BYTE $0xc0               // vmovdqa    ymm13, yword [rcx - 64]
	LONG $0xef1d41c4; BYTE $0xf0               // vpxor    ymm14, ymm12, ymm8
	LONG $0xdb1d41c4; BYTE $0xc0               // vpand    ymm8, ymm12, ymm8
	LONG $0xd7eb2dc5                           // vpor    ymm10, ymm10, ymm7
	LONG $0xdb0dc1c4; BYTE $0xfd               // vpand    ymm7, ymm14, ymm13
	LONG $0xef0d41c4; BYTE $0xe5               // vpxor    ymm12, ymm14, ymm13
	LONG $0x696f7dc5; BYTE $0xe0               // vmovdqa    ymm13, yword [rcx - 32]
	LONG $0xeb4541c4; BYTE $0xc0               // vpor    ymm8, ymm7, ymm8
	LONG $0x396ffdc5                           // vmovdqa    ymm7, yword [rcx]
	LONG $0xef1541c4; BYTE $0xf4               // vpxor    ymm14, ymm13, ymm12
	LONG $0xdb1541c4; BYTE $0xe4               // vpand    ymm12, ymm13, ymm12
	LONG $0xefdb0dc5                           // vpand    ymm13, ymm14, ymm7
	LONG $0xffef8dc5                           // vpxor    ymm7, ymm14, ymm7
	LONG $0xef3d41c4; BYTE $0xf1               // vpxor    ymm14, ymm8, ymm9
	LONG $0xdb3d41c4; BYTE $0xc9               // vpand    ymm9, ymm8, ymm9
	LONG $0xeb1541c4; BYTE $0xc4               // vpor    ymm8, ymm13, ymm12
	LONG $0xdb3d41c4; BYTE $0xe6               // vpand    ymm12, ymm8, ymm14
	LONG $0xef3d41c4; BYTE $0xc6               // vpxor    ymm8, ymm8, ymm14
	LONG $0xef2d41c4; BYTE $0xeb               // vpxor    ymm13, ymm10, ymm11
	LONG $0xeb1d41c4; BYTE $0xc9               // vpor    ymm9, ymm12, ymm9
	LONG $0xdb2d41c4; BYTE $0xd3               // vpand    ymm10, ymm10, ymm11
	LONG $0xdb3541c4; BYTE $0xdd               // vpand    ymm11, ymm9, ymm13
	LONG $0xe1ef4dc5                           // vpxor    ymm12, ymm6, ymm1
	LONG $0xeb2541c4; BYTE $0xd2               // vpor    ymm10, ymm11, ymm10
	LONG $0xc9dbcdc5                           // vpand    ymm1, ymm6, ymm1
	LONG $0xdb2dc1c4; BYTE $0xf4               // vpand    ymm6, ymm10, ymm12
	LONG $0xd9eb4dc5                           // vpor    ymm11, ymm6, ymm1
	LONG $0xef35c1c4; BYTE $0xf5               // vpxor    ymm6, ymm9, ymm13
	LONG $0xef2dc1c4; BYTE $0xcc               // vpxor    ymm1, ymm10, ymm12
	LONG $0x7235c1c4; WORD $0x04d3             // vpsrld    ymm9, ymm11, 4
	LONG $0xd3db25c5                           // vpand    ymm10, ymm11, ymm3
	LONG $0x005d42c4; BYTE $0xd2               // vpshufb    ymm10, ymm4, ymm10
	LONG $0xcbdb35c5                           // vpand    ymm9, ymm9, ymm3
	LONG $0x005d42c4; BYTE $0xc9               // vpshufb    ymm9, ymm4, ymm9
	LONG $0xfc3541c4; BYTE $0xca               // vpaddb    ymm9, ymm9, ymm10
	LONG $0xcaf635c5                           // vpsadbw    ymm9, ymm9, ymm2
	LONG $0xedd4b5c5                           // vpaddq    ymm5, ymm9, ymm5
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // add    rcx, 512
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JB   LBB0_4
	LONG $0xf573edc5; BYTE $0x04               // vpsllq    ymm2, ymm5, 4

LBB0_6:
	LONG $0xd172e5c5; BYTE $0x04   // vpsrld    ymm3, ymm1, 4
	LONG $0x656ffdc5; BYTE $0x00   // vmovdqa    ymm4, yword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xccdbf5c5               // vpand    ymm1, ymm1, ymm4
	LONG $0x6d6ffdc5; BYTE $0x20   // vmovdqa    ymm5, yword 32[rbp] /* [rip + .LCPI0_1] */
	LONG $0x0055e2c4; BYTE $0xc9   // vpshufb    ymm1, ymm5, ymm1
	LONG $0xdcdbe5c5               // vpand    ymm3, ymm3, ymm4
	LONG $0x0055e2c4; BYTE $0xdb   // vpshufb    ymm3, ymm5, ymm3
	LONG $0xc9fce5c5               // vpaddb    ymm1, ymm3, ymm1
	LONG $0xc8f6f5c5               // vpsadbw    ymm1, ymm1, ymm0
	LONG $0xf173f5c5; BYTE $0x03   // vpsllq    ymm1, ymm1, 3
	LONG $0xcad4f5c5               // vpaddq    ymm1, ymm1, ymm2
	LONG $0xd672edc5; BYTE $0x04   // vpsrld    ymm2, ymm6, 4
	LONG $0xdcdbcdc5               // vpand    ymm3, ymm6, ymm4
	LONG $0x0055e2c4; BYTE $0xdb   // vpshufb    ymm3, ymm5, ymm3
	LONG $0xd4dbedc5               // vpand    ymm2, ymm2, ymm4
	LONG $0x0055e2c4; BYTE $0xd2   // vpshufb    ymm2, ymm5, ymm2
	LONG $0xd3fcedc5               // vpaddb    ymm2, ymm2, ymm3
	LONG $0xd0f6edc5               // vpsadbw    ymm2, ymm2, ymm0
	LONG $0xf273edc5; BYTE $0x02   // vpsllq    ymm2, ymm2, 2
	LONG $0x7265c1c4; WORD $0x04d0 // vpsrld    ymm3, ymm8, 4
	LONG $0xf4dbbdc5               // vpand    ymm6, ymm8, ymm4
	LONG $0x0055e2c4; BYTE $0xf6   // vpshufb    ymm6, ymm5, ymm6
	LONG $0xdcdbe5c5               // vpand    ymm3, ymm3, ymm4
	LONG $0x0055e2c4; BYTE $0xdb   // vpshufb    ymm3, ymm5, ymm3
	LONG $0xdefce5c5               // vpaddb    ymm3, ymm3, ymm6
	LONG $0xd8f6e5c5               // vpsadbw    ymm3, ymm3, ymm0
	LONG $0xdbd4e5c5               // vpaddq    ymm3, ymm3, ymm3
	LONG $0xd3d4edc5               // vpaddq    ymm2, ymm2, ymm3
	LONG $0xd772e5c5; BYTE $0x04   // vpsrld    ymm3, ymm7, 4
	LONG $0xf4dbc5c5               // vpand    ymm6, ymm7, ymm4
	LONG $0x0055e2c4; BYTE $0xf6   // vpshufb    ymm6, ymm5, ymm6
	LONG $0xdcdbe5c5               // vpand    ymm3, ymm3, ymm4
	LONG $0x0055e2c4; BYTE $0xdb   // vpshufb    ymm3, ymm5, ymm3
	LONG $0xdefce5c5               // vpaddb    ymm3, ymm3, ymm6
	LONG $0xc0f6e5c5               // vpsadbw    ymm0, ymm3, ymm0
	LONG $0xc0d4f5c5               // vpaddq    ymm0, ymm1, ymm0
	LONG $0xc0d4edc5               // vpaddq    ymm0, ymm2, ymm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	LONG $0x16f9c3c4; WORD $0x01c0 // vpextrq    r8, xmm0, 1
	WORD $0x0149; BYTE $0xc0       // add    r8, rax
	LONG $0x397de3c4; WORD $0x01c0 // vextracti128    xmm0, ymm0, 1
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq    rcx, xmm0
	LONG $0x16f9c3c4; WORD $0x01c6 // vpextrq    r14, xmm0, 1
	WORD $0x014c; BYTE $0xc1       // add    rcx, r8
	WORD $0x0149; BYTE $0xce       // add    r14, rcx
	WORD $0x894c; BYTE $0x32       // mov    qword [rdx], r14
	WORD $0xf189                   // mov    ecx, esi
	WORD $0xe183; BYTE $0xc0       // and    ecx, -64
	WORD $0xf139                   // cmp    ecx, esi
	JB   LBB0_8
	JMP  LBB0_10

LBB0_1:
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d
	WORD $0xf189             // mov    ecx, esi
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	WORD $0xf139             // cmp    ecx, esi
	JAE  LBB0_10

LBB0_8:
	QUAD $0x333333333333b849; WORD $0x3333 // mov    r8, 3689348814741910323
	WORD $0x6348; BYTE $0xc1               // movsxd    rax, ecx
	LONG $0xc73c8d48                       // lea    rdi, [rdi + 8*rax]
	QUAD $0x555555555555b949; WORD $0x5555 // mov    r9, 6148914691236517205
	QUAD $0x0f0f0f0f0f0fba49; WORD $0x0f0f // mov    r10, 1085102592571150095
	QUAD $0x010101010101bb49; WORD $0x0101 // mov    r11, 72340172838076673

LBB0_9:
	WORD $0x8b48; BYTE $0x1f // mov    rbx, qword [rdi]
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	WORD $0xd148; BYTE $0xe8 // shr    rax, 1
	WORD $0x214c; BYTE $0xc8 // and    rax, r9
	WORD $0x2948; BYTE $0xc3 // sub    rbx, rax
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	WORD $0x214c; BYTE $0xc0 // and    rax, r8
	LONG $0x02ebc148         // shr    rbx, 2
	WORD $0x214c; BYTE $0xc3 // and    rbx, r8
	WORD $0x0148; BYTE $0xc3 // add    rbx, rax
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	LONG $0x04e8c148         // shr    rax, 4
	WORD $0x0148; BYTE $0xd8 // add    rax, rbx
	WORD $0x214c; BYTE $0xd0 // and    rax, r10
	LONG $0xc3af0f49         // imul    rax, r11
	LONG $0x38e8c148         // shr    rax, 56
	WORD $0x0149; BYTE $0xc6 // add    r14, rax
	WORD $0x894c; BYTE $0x32 // mov    qword [rdx], r14
	LONG $0x08c78348         // add    rdi, 8
	WORD $0xc183; BYTE $0x01 // add    ecx, 1
	WORD $0xf139             // cmp    ecx, esi
	JB   LBB0_9

LBB0_10:
	VZEROUPPER
	RET
