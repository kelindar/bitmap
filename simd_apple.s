//go:build !noasm && darwin && arm64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT ·_and(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD $0x910003fd  // mov	x29, sp
	WORD $0xb40002a2  // cbz	x2, LBB0_7
	WORD $0xf100105f  // cmp	x2, #4
	WORD $0x54000103  // b.lo	LBB0_4
	WORD $0xd37df048  // lsl	x8, x2, #3
	WORD $0x8b080029  // add	x9, x1, x8
	WORD $0xeb00013f  // cmp	x9, x0
	WORD $0x54000229  // b.ls	LBB0_8
	WORD $0x8b080008  // add	x8, x0, x8
	WORD $0xeb01011f  // cmp	x8, x1
	WORD $0x540001c9  // b.ls	LBB0_8

BB0_4:
	WORD $0xd2800008 // mov	x8, #0

BB0_5:
	WORD $0xcb080049 // sub	x9, x2, x8
	WORD $0xd37df10a // lsl	x10, x8, #3
	WORD $0x8b0a0008 // add	x8, x0, x10
	WORD $0x8b0a002a // add	x10, x1, x10

BB0_6:
	WORD $0xf840854b // ldr	x11, [x10], #8
	WORD $0xf940010c // ldr	x12, [x8]
	WORD $0x8a0b018b // and	x11, x12, x11
	WORD $0xf800850b // str	x11, [x8], #8
	WORD $0xf1000529 // subs	x9, x9, #1
	WORD $0x54ffff61 // b.ne	LBB0_6

BB0_7:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

BB0_8:
	WORD $0x927ef448 // and	x8, x2, #0xfffffffffffffffc
	WORD $0x91004029 // add	x9, x1, #16
	WORD $0x9100400a // add	x10, x0, #16
	WORD $0xaa0803eb // mov	x11, x8

BB0_9:
	WORD $0xad7f8520 // ldp	q0, q1, [x9, #-16]
	WORD $0xad7f8d42 // ldp	q2, q3, [x10, #-16]
	WORD $0x4e201c40 // and.16b	v0, v2, v0
	WORD $0x4e211c61 // and.16b	v1, v3, v1
	WORD $0xad3f8540 // stp	q0, q1, [x10, #-16]
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x9100814a // add	x10, x10, #32
	WORD $0xf100116b // subs	x11, x11, #4
	WORD $0x54ffff01 // b.ne	LBB0_9
	WORD $0xeb02011f // cmp	x8, x2
	WORD $0x54fffe00 // b.eq	LBB0_7
	WORD $0x17ffffe5 // b	LBB0_5

TEXT ·_andn(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD $0x910003fd  // mov	x29, sp
	WORD $0xb40002a2  // cbz	x2, LBB1_7
	WORD $0xf100105f  // cmp	x2, #4
	WORD $0x54000103  // b.lo	LBB1_4
	WORD $0xd37df048  // lsl	x8, x2, #3
	WORD $0x8b080029  // add	x9, x1, x8
	WORD $0xeb00013f  // cmp	x9, x0
	WORD $0x54000229  // b.ls	LBB1_8
	WORD $0x8b080008  // add	x8, x0, x8
	WORD $0xeb01011f  // cmp	x8, x1
	WORD $0x540001c9  // b.ls	LBB1_8

BB1_4:
	WORD $0xd2800008 // mov	x8, #0

BB1_5:
	WORD $0xcb080049 // sub	x9, x2, x8
	WORD $0xd37df10a // lsl	x10, x8, #3
	WORD $0x8b0a0008 // add	x8, x0, x10
	WORD $0x8b0a002a // add	x10, x1, x10

BB1_6:
	WORD $0xf840854b // ldr	x11, [x10], #8
	WORD $0xf940010c // ldr	x12, [x8]
	WORD $0x8a2b018b // bic	x11, x12, x11
	WORD $0xf800850b // str	x11, [x8], #8
	WORD $0xf1000529 // subs	x9, x9, #1
	WORD $0x54ffff61 // b.ne	LBB1_6

BB1_7:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

BB1_8:
	WORD $0x927ef448 // and	x8, x2, #0xfffffffffffffffc
	WORD $0x91004029 // add	x9, x1, #16
	WORD $0x9100400a // add	x10, x0, #16
	WORD $0xaa0803eb // mov	x11, x8

BB1_9:
	WORD $0xad7f8520 // ldp	q0, q1, [x9, #-16]
	WORD $0xad7f8d42 // ldp	q2, q3, [x10, #-16]
	WORD $0x4e601c40 // bic.16b	v0, v2, v0
	WORD $0x4e611c61 // bic.16b	v1, v3, v1
	WORD $0xad3f8540 // stp	q0, q1, [x10, #-16]
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x9100814a // add	x10, x10, #32
	WORD $0xf100116b // subs	x11, x11, #4
	WORD $0x54ffff01 // b.ne	LBB1_9
	WORD $0xeb02011f // cmp	x8, x2
	WORD $0x54fffe00 // b.eq	LBB1_7
	WORD $0x17ffffe5 // b	LBB1_5

TEXT ·_or(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD $0x910003fd  // mov	x29, sp
	WORD $0xb40002a2  // cbz	x2, LBB2_7
	WORD $0xf100105f  // cmp	x2, #4
	WORD $0x54000103  // b.lo	LBB2_4
	WORD $0xd37df048  // lsl	x8, x2, #3
	WORD $0x8b080029  // add	x9, x1, x8
	WORD $0xeb00013f  // cmp	x9, x0
	WORD $0x54000229  // b.ls	LBB2_8
	WORD $0x8b080008  // add	x8, x0, x8
	WORD $0xeb01011f  // cmp	x8, x1
	WORD $0x540001c9  // b.ls	LBB2_8

BB2_4:
	WORD $0xd2800008 // mov	x8, #0

BB2_5:
	WORD $0xcb080049 // sub	x9, x2, x8
	WORD $0xd37df10a // lsl	x10, x8, #3
	WORD $0x8b0a0008 // add	x8, x0, x10
	WORD $0x8b0a002a // add	x10, x1, x10

BB2_6:
	WORD $0xf840854b // ldr	x11, [x10], #8
	WORD $0xf940010c // ldr	x12, [x8]
	WORD $0xaa0b018b // orr	x11, x12, x11
	WORD $0xf800850b // str	x11, [x8], #8
	WORD $0xf1000529 // subs	x9, x9, #1
	WORD $0x54ffff61 // b.ne	LBB2_6

BB2_7:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

BB2_8:
	WORD $0x927ef448 // and	x8, x2, #0xfffffffffffffffc
	WORD $0x91004029 // add	x9, x1, #16
	WORD $0x9100400a // add	x10, x0, #16
	WORD $0xaa0803eb // mov	x11, x8

BB2_9:
	WORD $0xad7f8520 // ldp	q0, q1, [x9, #-16]
	WORD $0xad7f8d42 // ldp	q2, q3, [x10, #-16]
	WORD $0x4ea01c40 // orr.16b	v0, v2, v0
	WORD $0x4ea11c61 // orr.16b	v1, v3, v1
	WORD $0xad3f8540 // stp	q0, q1, [x10, #-16]
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x9100814a // add	x10, x10, #32
	WORD $0xf100116b // subs	x11, x11, #4
	WORD $0x54ffff01 // b.ne	LBB2_9
	WORD $0xeb02011f // cmp	x8, x2
	WORD $0x54fffe00 // b.eq	LBB2_7
	WORD $0x17ffffe5 // b	LBB2_5

TEXT ·_xor(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD $0x910003fd  // mov	x29, sp
	WORD $0xb40002a2  // cbz	x2, LBB3_7
	WORD $0xf100105f  // cmp	x2, #4
	WORD $0x54000103  // b.lo	LBB3_4
	WORD $0xd37df048  // lsl	x8, x2, #3
	WORD $0x8b080029  // add	x9, x1, x8
	WORD $0xeb00013f  // cmp	x9, x0
	WORD $0x54000229  // b.ls	LBB3_8
	WORD $0x8b080008  // add	x8, x0, x8
	WORD $0xeb01011f  // cmp	x8, x1
	WORD $0x540001c9  // b.ls	LBB3_8

BB3_4:
	WORD $0xd2800008 // mov	x8, #0

BB3_5:
	WORD $0xcb080049 // sub	x9, x2, x8
	WORD $0xd37df10a // lsl	x10, x8, #3
	WORD $0x8b0a0008 // add	x8, x0, x10
	WORD $0x8b0a002a // add	x10, x1, x10

BB3_6:
	WORD $0xf840854b // ldr	x11, [x10], #8
	WORD $0xf940010c // ldr	x12, [x8]
	WORD $0xca0b018b // eor	x11, x12, x11
	WORD $0xf800850b // str	x11, [x8], #8
	WORD $0xf1000529 // subs	x9, x9, #1
	WORD $0x54ffff61 // b.ne	LBB3_6

BB3_7:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

BB3_8:
	WORD $0x927ef448 // and	x8, x2, #0xfffffffffffffffc
	WORD $0x91004029 // add	x9, x1, #16
	WORD $0x9100400a // add	x10, x0, #16
	WORD $0xaa0803eb // mov	x11, x8

BB3_9:
	WORD $0xad7f8520 // ldp	q0, q1, [x9, #-16]
	WORD $0xad7f8d42 // ldp	q2, q3, [x10, #-16]
	WORD $0x6e201c40 // eor.16b	v0, v2, v0
	WORD $0x6e211c61 // eor.16b	v1, v3, v1
	WORD $0xad3f8540 // stp	q0, q1, [x10, #-16]
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x9100814a // add	x10, x10, #32
	WORD $0xf100116b // subs	x11, x11, #4
	WORD $0x54ffff01 // b.ne	LBB3_9
	WORD $0xeb02011f // cmp	x8, x2
	WORD $0x54fffe00 // b.eq	LBB3_7
	WORD $0x17ffffe5 // b	LBB3_5

TEXT ·_and_many(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	WORD $0xa9bb67fa     // stp	x26, x25, [sp, #-80]!           ; 16-byte Folded Spill
	WORD $0xa9015ff8     // stp	x24, x23, [sp, #16]             ; 16-byte Folded Spill
	WORD $0xa90257f6     // stp	x22, x21, [sp, #32]             ; 16-byte Folded Spill
	WORD $0xa9034ff4     // stp	x20, x19, [sp, #48]             ; 16-byte Folded Spill
	WORD $0xa9047bfd     // stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	WORD $0x910103fd     // add	x29, sp, #64
	WORD $0xf2407c48     // ands	x8, x2, #0xffffffff
	WORD $0x54000a20     // b.eq	LBB4_14
	WORD $0xd360fc4b     // lsr	x11, x2, #32
	WORD $0xb40009eb     // cbz	x11, LBB4_14
	WORD $0xd2800009     // mov	x9, #0
	WORD $0xd280000a     // mov	x10, #0
	WORD $0xd280000f     // mov	x15, #0
	WORD $0xf100057f     // cmp	x11, #1
	WORD $0x9a9f856b     // csinc	x11, x11, xzr, hi
	WORD $0x9100400c     // add	x12, x0, #16
	WORD $0x5280400d     // mov	w13, #512
	WORD $0x5280020e     // mov	w14, #16
	WORD $0x14000009     // b	LBB4_4

BB4_3:
	WORD $0x910801ad // add	x13, x13, #512
	WORD $0x9100054a // add	x10, x10, #1
	WORD $0xd1080129 // sub	x9, x9, #512
	WORD $0x914005ce // add	x14, x14, #1, lsl #12           ; =4096
	WORD $0x9140058c // add	x12, x12, #1, lsl #12           ; =4096
	WORD $0xaa1003ef // mov	x15, x16
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x540007c2 // b.hs	LBB4_14

BB4_4:
	WORD $0xeb0801bf // cmp	x13, x8
	WORD $0x9a8831b1 // csel	x17, x13, x8, lo
	WORD $0x910801f0 // add	x16, x15, #512
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x9a883202 // csel	x2, x16, x8, lo
	WORD $0xeb0201ff // cmp	x15, x2
	WORD $0x54fffe42 // b.hs	LBB4_3
	WORD $0xd2800002 // mov	x2, #0
	WORD $0x8b090223 // add	x3, x17, x9
	WORD $0x927ef463 // and	x3, x3, #0xfffffffffffffffc
	WORD $0xcb0a2624 // sub	x4, x17, x10, lsl #9
	WORD $0xd374cd45 // lsl	x5, x10, #12
	WORD $0xd37df086 // lsl	x6, x4, #3
	WORD $0xd10020d5 // sub	x21, x6, #8
	WORD $0x8b050006 // add	x6, x0, x5
	WORD $0x8b1500c7 // add	x7, x6, x21
	WORD $0x910020e7 // add	x7, x7, #8
	WORD $0x927ef493 // and	x19, x4, #0xfffffffffffffffc
	WORD $0x8b1301f4 // add	x20, x15, x19
	WORD $0x8b1500b5 // add	x21, x5, x21
	WORD $0x14000004 // b	LBB4_7

BB4_6:
	WORD $0x91000442 // add	x2, x2, #1
	WORD $0xeb0b005f // cmp	x2, x11
	WORD $0x54fffc20 // b.eq	LBB4_3

BB4_7:
	WORD $0xf8627836 // ldr	x22, [x1, x2, lsl #3]
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0xf100109f // cmp	x4, #4
	WORD $0x540002e3 // b.lo	LBB4_12
	WORD $0x8b0502d7 // add	x23, x22, x5
	WORD $0x8b1502d8 // add	x24, x22, x21
	WORD $0x91002318 // add	x24, x24, #8
	WORD $0xeb1800df // cmp	x6, x24
	WORD $0xfa4732e2 // ccmp	x23, x7, #2, lo
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0x54000203 // b.lo	LBB4_12
	WORD $0x8b0e02d7 // add	x23, x22, x14
	WORD $0xaa0c03f8 // mov	x24, x12
	WORD $0xaa0303f9 // mov	x25, x3

BB4_10:
	WORD $0xad7f86e0 // ldp	q0, q1, [x23, #-16]
	WORD $0xad7f8f02 // ldp	q2, q3, [x24, #-16]
	WORD $0x4e201c40 // and.16b	v0, v2, v0
	WORD $0x4e211c61 // and.16b	v1, v3, v1
	WORD $0xad3f8700 // stp	q0, q1, [x24, #-16]
	WORD $0x910082f7 // add	x23, x23, #32
	WORD $0x91008318 // add	x24, x24, #32
	WORD $0xf1001339 // subs	x25, x25, #4
	WORD $0x54ffff01 // b.ne	LBB4_10
	WORD $0xaa1403f8 // mov	x24, x20
	WORD $0xeb13009f // cmp	x4, x19
	WORD $0x54fffc80 // b.eq	LBB4_6

BB4_12:
	WORD $0xcb180237 // sub	x23, x17, x24
	WORD $0xd37df319 // lsl	x25, x24, #3
	WORD $0x8b190018 // add	x24, x0, x25
	WORD $0x8b1902d6 // add	x22, x22, x25

BB4_13:
	WORD $0xf84086d9 // ldr	x25, [x22], #8
	WORD $0xf940031a // ldr	x26, [x24]
	WORD $0x8a190359 // and	x25, x26, x25
	WORD $0xf8008719 // str	x25, [x24], #8
	WORD $0xf10006f7 // subs	x23, x23, #1
	WORD $0x54ffff61 // b.ne	LBB4_13
	WORD $0x17ffffd9 // b	LBB4_6

BB4_14:
	WORD $0xa9447bfd // ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	WORD $0xa9434ff4 // ldp	x20, x19, [sp, #48]             ; 16-byte Folded Reload
	WORD $0xa94257f6 // ldp	x22, x21, [sp, #32]             ; 16-byte Folded Reload
	WORD $0xa9415ff8 // ldp	x24, x23, [sp, #16]             ; 16-byte Folded Reload
	WORD $0xa8c567fa // ldp	x26, x25, [sp], #80             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

TEXT ·_andn_many(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	WORD $0xa9bb67fa     // stp	x26, x25, [sp, #-80]!           ; 16-byte Folded Spill
	WORD $0xa9015ff8     // stp	x24, x23, [sp, #16]             ; 16-byte Folded Spill
	WORD $0xa90257f6     // stp	x22, x21, [sp, #32]             ; 16-byte Folded Spill
	WORD $0xa9034ff4     // stp	x20, x19, [sp, #48]             ; 16-byte Folded Spill
	WORD $0xa9047bfd     // stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	WORD $0x910103fd     // add	x29, sp, #64
	WORD $0xf2407c48     // ands	x8, x2, #0xffffffff
	WORD $0x54000a20     // b.eq	LBB5_14
	WORD $0xd360fc4b     // lsr	x11, x2, #32
	WORD $0xb40009eb     // cbz	x11, LBB5_14
	WORD $0xd2800009     // mov	x9, #0
	WORD $0xd280000a     // mov	x10, #0
	WORD $0xd280000f     // mov	x15, #0
	WORD $0xf100057f     // cmp	x11, #1
	WORD $0x9a9f856b     // csinc	x11, x11, xzr, hi
	WORD $0x9100400c     // add	x12, x0, #16
	WORD $0x5280400d     // mov	w13, #512
	WORD $0x5280020e     // mov	w14, #16
	WORD $0x14000009     // b	LBB5_4

BB5_3:
	WORD $0x910801ad // add	x13, x13, #512
	WORD $0x9100054a // add	x10, x10, #1
	WORD $0xd1080129 // sub	x9, x9, #512
	WORD $0x914005ce // add	x14, x14, #1, lsl #12           ; =4096
	WORD $0x9140058c // add	x12, x12, #1, lsl #12           ; =4096
	WORD $0xaa1003ef // mov	x15, x16
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x540007c2 // b.hs	LBB5_14

BB5_4:
	WORD $0xeb0801bf // cmp	x13, x8
	WORD $0x9a8831b1 // csel	x17, x13, x8, lo
	WORD $0x910801f0 // add	x16, x15, #512
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x9a883202 // csel	x2, x16, x8, lo
	WORD $0xeb0201ff // cmp	x15, x2
	WORD $0x54fffe42 // b.hs	LBB5_3
	WORD $0xd2800002 // mov	x2, #0
	WORD $0x8b090223 // add	x3, x17, x9
	WORD $0x927ef463 // and	x3, x3, #0xfffffffffffffffc
	WORD $0xcb0a2624 // sub	x4, x17, x10, lsl #9
	WORD $0xd374cd45 // lsl	x5, x10, #12
	WORD $0xd37df086 // lsl	x6, x4, #3
	WORD $0xd10020d5 // sub	x21, x6, #8
	WORD $0x8b050006 // add	x6, x0, x5
	WORD $0x8b1500c7 // add	x7, x6, x21
	WORD $0x910020e7 // add	x7, x7, #8
	WORD $0x927ef493 // and	x19, x4, #0xfffffffffffffffc
	WORD $0x8b1301f4 // add	x20, x15, x19
	WORD $0x8b1500b5 // add	x21, x5, x21
	WORD $0x14000004 // b	LBB5_7

BB5_6:
	WORD $0x91000442 // add	x2, x2, #1
	WORD $0xeb0b005f // cmp	x2, x11
	WORD $0x54fffc20 // b.eq	LBB5_3

BB5_7:
	WORD $0xf8627836 // ldr	x22, [x1, x2, lsl #3]
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0xf100109f // cmp	x4, #4
	WORD $0x540002e3 // b.lo	LBB5_12
	WORD $0x8b0502d7 // add	x23, x22, x5
	WORD $0x8b1502d8 // add	x24, x22, x21
	WORD $0x91002318 // add	x24, x24, #8
	WORD $0xeb1800df // cmp	x6, x24
	WORD $0xfa4732e2 // ccmp	x23, x7, #2, lo
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0x54000203 // b.lo	LBB5_12
	WORD $0x8b0e02d7 // add	x23, x22, x14
	WORD $0xaa0c03f8 // mov	x24, x12
	WORD $0xaa0303f9 // mov	x25, x3

BB5_10:
	WORD $0xad7f86e0 // ldp	q0, q1, [x23, #-16]
	WORD $0xad7f8f02 // ldp	q2, q3, [x24, #-16]
	WORD $0x4e601c40 // bic.16b	v0, v2, v0
	WORD $0x4e611c61 // bic.16b	v1, v3, v1
	WORD $0xad3f8700 // stp	q0, q1, [x24, #-16]
	WORD $0x910082f7 // add	x23, x23, #32
	WORD $0x91008318 // add	x24, x24, #32
	WORD $0xf1001339 // subs	x25, x25, #4
	WORD $0x54ffff01 // b.ne	LBB5_10
	WORD $0xaa1403f8 // mov	x24, x20
	WORD $0xeb13009f // cmp	x4, x19
	WORD $0x54fffc80 // b.eq	LBB5_6

BB5_12:
	WORD $0xcb180237 // sub	x23, x17, x24
	WORD $0xd37df319 // lsl	x25, x24, #3
	WORD $0x8b190018 // add	x24, x0, x25
	WORD $0x8b1902d6 // add	x22, x22, x25

BB5_13:
	WORD $0xf84086d9 // ldr	x25, [x22], #8
	WORD $0xf940031a // ldr	x26, [x24]
	WORD $0x8a390359 // bic	x25, x26, x25
	WORD $0xf8008719 // str	x25, [x24], #8
	WORD $0xf10006f7 // subs	x23, x23, #1
	WORD $0x54ffff61 // b.ne	LBB5_13
	WORD $0x17ffffd9 // b	LBB5_6

BB5_14:
	WORD $0xa9447bfd // ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	WORD $0xa9434ff4 // ldp	x20, x19, [sp, #48]             ; 16-byte Folded Reload
	WORD $0xa94257f6 // ldp	x22, x21, [sp, #32]             ; 16-byte Folded Reload
	WORD $0xa9415ff8 // ldp	x24, x23, [sp, #16]             ; 16-byte Folded Reload
	WORD $0xa8c567fa // ldp	x26, x25, [sp], #80             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

TEXT ·_or_many(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	WORD $0xa9bb67fa     // stp	x26, x25, [sp, #-80]!           ; 16-byte Folded Spill
	WORD $0xa9015ff8     // stp	x24, x23, [sp, #16]             ; 16-byte Folded Spill
	WORD $0xa90257f6     // stp	x22, x21, [sp, #32]             ; 16-byte Folded Spill
	WORD $0xa9034ff4     // stp	x20, x19, [sp, #48]             ; 16-byte Folded Spill
	WORD $0xa9047bfd     // stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	WORD $0x910103fd     // add	x29, sp, #64
	WORD $0xf2407c48     // ands	x8, x2, #0xffffffff
	WORD $0x54000a20     // b.eq	LBB6_14
	WORD $0xd360fc4b     // lsr	x11, x2, #32
	WORD $0xb40009eb     // cbz	x11, LBB6_14
	WORD $0xd2800009     // mov	x9, #0
	WORD $0xd280000a     // mov	x10, #0
	WORD $0xd280000f     // mov	x15, #0
	WORD $0xf100057f     // cmp	x11, #1
	WORD $0x9a9f856b     // csinc	x11, x11, xzr, hi
	WORD $0x9100400c     // add	x12, x0, #16
	WORD $0x5280400d     // mov	w13, #512
	WORD $0x5280020e     // mov	w14, #16
	WORD $0x14000009     // b	LBB6_4

BB6_3:
	WORD $0x910801ad // add	x13, x13, #512
	WORD $0x9100054a // add	x10, x10, #1
	WORD $0xd1080129 // sub	x9, x9, #512
	WORD $0x914005ce // add	x14, x14, #1, lsl #12           ; =4096
	WORD $0x9140058c // add	x12, x12, #1, lsl #12           ; =4096
	WORD $0xaa1003ef // mov	x15, x16
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x540007c2 // b.hs	LBB6_14

BB6_4:
	WORD $0xeb0801bf // cmp	x13, x8
	WORD $0x9a8831b1 // csel	x17, x13, x8, lo
	WORD $0x910801f0 // add	x16, x15, #512
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x9a883202 // csel	x2, x16, x8, lo
	WORD $0xeb0201ff // cmp	x15, x2
	WORD $0x54fffe42 // b.hs	LBB6_3
	WORD $0xd2800002 // mov	x2, #0
	WORD $0x8b090223 // add	x3, x17, x9
	WORD $0x927ef463 // and	x3, x3, #0xfffffffffffffffc
	WORD $0xcb0a2624 // sub	x4, x17, x10, lsl #9
	WORD $0xd374cd45 // lsl	x5, x10, #12
	WORD $0xd37df086 // lsl	x6, x4, #3
	WORD $0xd10020d5 // sub	x21, x6, #8
	WORD $0x8b050006 // add	x6, x0, x5
	WORD $0x8b1500c7 // add	x7, x6, x21
	WORD $0x910020e7 // add	x7, x7, #8
	WORD $0x927ef493 // and	x19, x4, #0xfffffffffffffffc
	WORD $0x8b1301f4 // add	x20, x15, x19
	WORD $0x8b1500b5 // add	x21, x5, x21
	WORD $0x14000004 // b	LBB6_7

BB6_6:
	WORD $0x91000442 // add	x2, x2, #1
	WORD $0xeb0b005f // cmp	x2, x11
	WORD $0x54fffc20 // b.eq	LBB6_3

BB6_7:
	WORD $0xf8627836 // ldr	x22, [x1, x2, lsl #3]
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0xf100109f // cmp	x4, #4
	WORD $0x540002e3 // b.lo	LBB6_12
	WORD $0x8b0502d7 // add	x23, x22, x5
	WORD $0x8b1502d8 // add	x24, x22, x21
	WORD $0x91002318 // add	x24, x24, #8
	WORD $0xeb1800df // cmp	x6, x24
	WORD $0xfa4732e2 // ccmp	x23, x7, #2, lo
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0x54000203 // b.lo	LBB6_12
	WORD $0x8b0e02d7 // add	x23, x22, x14
	WORD $0xaa0c03f8 // mov	x24, x12
	WORD $0xaa0303f9 // mov	x25, x3

BB6_10:
	WORD $0xad7f86e0 // ldp	q0, q1, [x23, #-16]
	WORD $0xad7f8f02 // ldp	q2, q3, [x24, #-16]
	WORD $0x4ea01c40 // orr.16b	v0, v2, v0
	WORD $0x4ea11c61 // orr.16b	v1, v3, v1
	WORD $0xad3f8700 // stp	q0, q1, [x24, #-16]
	WORD $0x910082f7 // add	x23, x23, #32
	WORD $0x91008318 // add	x24, x24, #32
	WORD $0xf1001339 // subs	x25, x25, #4
	WORD $0x54ffff01 // b.ne	LBB6_10
	WORD $0xaa1403f8 // mov	x24, x20
	WORD $0xeb13009f // cmp	x4, x19
	WORD $0x54fffc80 // b.eq	LBB6_6

BB6_12:
	WORD $0xcb180237 // sub	x23, x17, x24
	WORD $0xd37df319 // lsl	x25, x24, #3
	WORD $0x8b190018 // add	x24, x0, x25
	WORD $0x8b1902d6 // add	x22, x22, x25

BB6_13:
	WORD $0xf84086d9 // ldr	x25, [x22], #8
	WORD $0xf940031a // ldr	x26, [x24]
	WORD $0xaa190359 // orr	x25, x26, x25
	WORD $0xf8008719 // str	x25, [x24], #8
	WORD $0xf10006f7 // subs	x23, x23, #1
	WORD $0x54ffff61 // b.ne	LBB6_13
	WORD $0x17ffffd9 // b	LBB6_6

BB6_14:
	WORD $0xa9447bfd // ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	WORD $0xa9434ff4 // ldp	x20, x19, [sp, #48]             ; 16-byte Folded Reload
	WORD $0xa94257f6 // ldp	x22, x21, [sp, #32]             ; 16-byte Folded Reload
	WORD $0xa9415ff8 // ldp	x24, x23, [sp, #16]             ; 16-byte Folded Reload
	WORD $0xa8c567fa // ldp	x26, x25, [sp], #80             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

TEXT ·_xor_many(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	WORD $0xa9bb67fa     // stp	x26, x25, [sp, #-80]!           ; 16-byte Folded Spill
	WORD $0xa9015ff8     // stp	x24, x23, [sp, #16]             ; 16-byte Folded Spill
	WORD $0xa90257f6     // stp	x22, x21, [sp, #32]             ; 16-byte Folded Spill
	WORD $0xa9034ff4     // stp	x20, x19, [sp, #48]             ; 16-byte Folded Spill
	WORD $0xa9047bfd     // stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	WORD $0x910103fd     // add	x29, sp, #64
	WORD $0xf2407c48     // ands	x8, x2, #0xffffffff
	WORD $0x54000a20     // b.eq	LBB7_14
	WORD $0xd360fc4b     // lsr	x11, x2, #32
	WORD $0xb40009eb     // cbz	x11, LBB7_14
	WORD $0xd2800009     // mov	x9, #0
	WORD $0xd280000a     // mov	x10, #0
	WORD $0xd280000f     // mov	x15, #0
	WORD $0xf100057f     // cmp	x11, #1
	WORD $0x9a9f856b     // csinc	x11, x11, xzr, hi
	WORD $0x9100400c     // add	x12, x0, #16
	WORD $0x5280400d     // mov	w13, #512
	WORD $0x5280020e     // mov	w14, #16
	WORD $0x14000009     // b	LBB7_4

BB7_3:
	WORD $0x910801ad // add	x13, x13, #512
	WORD $0x9100054a // add	x10, x10, #1
	WORD $0xd1080129 // sub	x9, x9, #512
	WORD $0x914005ce // add	x14, x14, #1, lsl #12           ; =4096
	WORD $0x9140058c // add	x12, x12, #1, lsl #12           ; =4096
	WORD $0xaa1003ef // mov	x15, x16
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x540007c2 // b.hs	LBB7_14

BB7_4:
	WORD $0xeb0801bf // cmp	x13, x8
	WORD $0x9a8831b1 // csel	x17, x13, x8, lo
	WORD $0x910801f0 // add	x16, x15, #512
	WORD $0xeb08021f // cmp	x16, x8
	WORD $0x9a883202 // csel	x2, x16, x8, lo
	WORD $0xeb0201ff // cmp	x15, x2
	WORD $0x54fffe42 // b.hs	LBB7_3
	WORD $0xd2800002 // mov	x2, #0
	WORD $0x8b090223 // add	x3, x17, x9
	WORD $0x927ef463 // and	x3, x3, #0xfffffffffffffffc
	WORD $0xcb0a2624 // sub	x4, x17, x10, lsl #9
	WORD $0xd374cd45 // lsl	x5, x10, #12
	WORD $0xd37df086 // lsl	x6, x4, #3
	WORD $0xd10020d5 // sub	x21, x6, #8
	WORD $0x8b050006 // add	x6, x0, x5
	WORD $0x8b1500c7 // add	x7, x6, x21
	WORD $0x910020e7 // add	x7, x7, #8
	WORD $0x927ef493 // and	x19, x4, #0xfffffffffffffffc
	WORD $0x8b1301f4 // add	x20, x15, x19
	WORD $0x8b1500b5 // add	x21, x5, x21
	WORD $0x14000004 // b	LBB7_7

BB7_6:
	WORD $0x91000442 // add	x2, x2, #1
	WORD $0xeb0b005f // cmp	x2, x11
	WORD $0x54fffc20 // b.eq	LBB7_3

BB7_7:
	WORD $0xf8627836 // ldr	x22, [x1, x2, lsl #3]
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0xf100109f // cmp	x4, #4
	WORD $0x540002e3 // b.lo	LBB7_12
	WORD $0x8b0502d7 // add	x23, x22, x5
	WORD $0x8b1502d8 // add	x24, x22, x21
	WORD $0x91002318 // add	x24, x24, #8
	WORD $0xeb1800df // cmp	x6, x24
	WORD $0xfa4732e2 // ccmp	x23, x7, #2, lo
	WORD $0xaa0f03f8 // mov	x24, x15
	WORD $0x54000203 // b.lo	LBB7_12
	WORD $0x8b0e02d7 // add	x23, x22, x14
	WORD $0xaa0c03f8 // mov	x24, x12
	WORD $0xaa0303f9 // mov	x25, x3

BB7_10:
	WORD $0xad7f86e0 // ldp	q0, q1, [x23, #-16]
	WORD $0xad7f8f02 // ldp	q2, q3, [x24, #-16]
	WORD $0x6e201c40 // eor.16b	v0, v2, v0
	WORD $0x6e211c61 // eor.16b	v1, v3, v1
	WORD $0xad3f8700 // stp	q0, q1, [x24, #-16]
	WORD $0x910082f7 // add	x23, x23, #32
	WORD $0x91008318 // add	x24, x24, #32
	WORD $0xf1001339 // subs	x25, x25, #4
	WORD $0x54ffff01 // b.ne	LBB7_10
	WORD $0xaa1403f8 // mov	x24, x20
	WORD $0xeb13009f // cmp	x4, x19
	WORD $0x54fffc80 // b.eq	LBB7_6

BB7_12:
	WORD $0xcb180237 // sub	x23, x17, x24
	WORD $0xd37df319 // lsl	x25, x24, #3
	WORD $0x8b190018 // add	x24, x0, x25
	WORD $0x8b1902d6 // add	x22, x22, x25

BB7_13:
	WORD $0xf84086d9 // ldr	x25, [x22], #8
	WORD $0xf940031a // ldr	x26, [x24]
	WORD $0xca190359 // eor	x25, x26, x25
	WORD $0xf8008719 // str	x25, [x24], #8
	WORD $0xf10006f7 // subs	x23, x23, #1
	WORD $0x54ffff61 // b.ne	LBB7_13
	WORD $0x17ffffd9 // b	LBB7_6

BB7_14:
	WORD $0xa9447bfd // ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	WORD $0xa9434ff4 // ldp	x20, x19, [sp, #48]             ; 16-byte Folded Reload
	WORD $0xa94257f6 // ldp	x22, x21, [sp, #32]             ; 16-byte Folded Reload
	WORD $0xa9415ff8 // ldp	x24, x23, [sp, #16]             ; 16-byte Folded Reload
	WORD $0xa8c567fa // ldp	x26, x25, [sp], #80             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret

TEXT ·_count(SB), $0-32
	MOVD a+0(FP), R0
	MOVD size+8(FP), R1
	MOVD result+16(FP), R2
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	WORD $0x910003fd       // mov	x29, sp
	WORD $0xb40000c1       // cbz	x1, LBB8_3
	WORD $0xf100103f       // cmp	x1, #4
	WORD $0x540000c2       // b.hs	LBB8_4
	WORD $0xd2800008       // mov	x8, #0
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x14000019       // b	LBB8_7

BB8_3:
	WORD $0xd2800009 // mov	x9, #0
	WORD $0x14000020 // b	LBB8_9

BB8_4:
	WORD $0x927ef428 // and	x8, x1, #0xfffffffffffffffc
	WORD $0x91004009 // add	x9, x0, #16
	WORD $0x6f00e400 // movi.2d	v0, #0000000000000000
	WORD $0xaa0803ea // mov	x10, x8
	WORD $0x6f00e401 // movi.2d	v1, #0000000000000000

BB8_5:
	WORD $0xad7f8d22 // ldp	q2, q3, [x9, #-16]
	WORD $0x4e205842 // cnt.16b	v2, v2
	WORD $0x6e202842 // uaddlp.8h	v2, v2
	WORD $0x6e602842 // uaddlp.4s	v2, v2
	WORD $0x4e205863 // cnt.16b	v3, v3
	WORD $0x6e202863 // uaddlp.8h	v3, v3
	WORD $0x6e602863 // uaddlp.4s	v3, v3
	WORD $0x6ea06840 // uadalp.2d	v0, v2
	WORD $0x6ea06861 // uadalp.2d	v1, v3
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0xf100114a // subs	x10, x10, #4
	WORD $0x54fffea1 // b.ne	LBB8_5
	WORD $0x4ee08420 // add.2d	v0, v1, v0
	WORD $0x5ef1b800 // addp.2d	d0, v0
	WORD $0x9e660009 // fmov	x9, d0
	WORD $0xeb01011f // cmp	x8, x1
	WORD $0x54000140 // b.eq	LBB8_9

BB8_7:
	WORD $0x8b080c0a // add	x10, x0, x8, lsl #3
	WORD $0xcb080028 // sub	x8, x1, x8

BB8_8:
	WORD $0xfc408540 // ldr	d0, [x10], #8
	WORD $0x0e205800 // cnt.8b	v0, v0
	WORD $0x2e303800 // uaddlv.8b	h0, v0
	WORD $0x1e26000b // fmov	w11, s0
	WORD $0x8b090169 // add	x9, x11, x9
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff41 // b.ne	LBB8_8

BB8_9:
	WORD $0xf9000049 // str	x9, [x2]
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16             ; 16-byte Folded Reload
	WORD $0xd65f03c0 // ret
